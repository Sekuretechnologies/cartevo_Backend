generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                        String            @id @default(uuid())
  name                      String
  country                   String?
  email                     String?           @unique
  client_id                 String?           @unique @map("client_id")
  client_key                String?           @map("client_key")
  is_active                 Boolean           @default(true) @map("is_active")
  created_at                DateTime          @default(now()) @map("created_at")
  updated_at                DateTime          @updatedAt @map("updated_at")
  business_address          String?           @map("business_address")
  business_description      String?           @map("business_description")
  business_name             String?           @map("business_name")
  business_phone_number     String?           @map("business_phone_number")
  business_proof_of_address String?           @map("business_proof_of_address")
  business_type             String?           @map("business_type")
  business_website          String?           @map("business_website")
  incorporation_certificate String?           @map("incorporation_certificate")
  memart                    String?           @map("memart")
  share_holding_document    String?           @map("share_holding_document")
  source_of_funds           String?           @map("source_of_funds")
  step                      Int               @default(1)
  tax_id_number             String?           @map("tax_id_number")
  kyb_status                KybStatus         @default(NONE) @map("kyb_status")
  country_currency          String?           @map("country_currency")
  country_iso_code          String?           @map("country_iso_code")
  country_phone_code        String?           @map("country_phone_code")
  webhook_url               String?           @map("webhook_url")
  webhook_is_active         Boolean           @default(true) @map("webhook_is_active")
  access_level              String?           @map("access_level")
  cards                     Card[]
  customers                 Customer[]
  exchangeRates             ExchangeRate[]
  onboardingSteps           OnboardingStep[]
  syncmetadatas             Syncmetadata[]
  transactionFees           TransactionFee[]
  transactions              Transaction[]
  userCompanyRoles          UserCompanyRole[]
  wallets                   Wallet[]
  pendingWithdrawals        PendingWithdrawal[]

  @@map("companies")
}

model User {
  id                   String            @id @default(uuid())
  full_name            String?           @map("full_name")
  email                String            @unique
  password             String?
  created_at           DateTime          @default(now()) @map("created_at")
  updated_at           DateTime          @updatedAt @map("updated_at")
  address              String?
  invitation_code      String?           @unique @map("invitation_code")
  otp                  String?
  otp_expires          DateTime?         @map("otp_expires")
  status               UserStatus        @default(PENDING)
  step                 Int               @default(1)
  city                 String?
  country_of_residence String?           @map("country_of_residence")
  first_name           String?           @map("first_name")
  gender               String?
  id_document_back     String?           @map("id_document_back")
  id_document_front    String?           @map("id_document_front")
  id_document_type     String?           @map("id_document_type")
  id_number            String?           @map("id_number")
  last_name            String?           @map("last_name")
  nationality          String?
  phone_number         String?           @map("phone_number")
  postal_code          String?           @map("postal_code")
  proof_of_address     String?           @map("proof_of_address")
  role_in_company      String?           @map("role_in_company")
  state                String?
  street               String?
  kyc_status           KycStatus         @default(NONE) @map("kyc_status")
  transactions         Transaction[]
  userCompanyRoles     UserCompanyRole[]

  @@map("users")
}

model Role {
  id               String            @id @default(uuid())
  name             String            @unique
  created_at       DateTime          @default(now()) @map("created_at")
  updated_at       DateTime          @updatedAt @map("updated_at")
  userCompanyRoles UserCompanyRole[]

  @@map("roles")
}

model UserCompanyRole {
  id         String     @id @default(uuid())
  user_id    String     @map("user_id")
  company_id String     @map("company_id")
  role_id    String     @map("role_id")
  created_at DateTime   @default(now()) @map("created_at")
  is_active  Boolean    @default(true) @map("is_active")
  status     UserStatus @default(PENDING) @map("status")
  company    Company    @relation(fields: [company_id], references: [id])
  role       Role       @relation(fields: [role_id], references: [id])
  user       User       @relation(fields: [user_id], references: [id])

  @@unique([user_id, company_id, role_id])
  @@map("user_company_roles")
}

model Wallet {
  id                 String              @id @default(uuid())
  balance            Decimal             @default(0) @db.Decimal(15, 2)
  payin_balance      Decimal             @default(0) @db.Decimal(15, 2) @map("payin_balance")
  payout_balance     Decimal             @default(0) @db.Decimal(15, 2) @map("payout_balance")
  payin_amount       Decimal             @default(0) @db.Decimal(15, 2) @map("payin_amount")
  payout_amount      Decimal             @default(0) @db.Decimal(15, 2) @map("payout_amount")
  active             Boolean             @default(true)
  currency           String
  country            String
  country_iso_code   String              @map("country_iso_code")
  company_id         String              @map("company_id")
  created_at         DateTime            @default(now()) @map("created_at")
  updated_at         DateTime            @updatedAt @map("updated_at")
  country_phone_code String?             @map("country_phone_code")
  transactions       Transaction[]
  phoneNumbers       WalletPhoneNumber[]
  transferRequestsFrom TransferRequest[] @relation("TransferRequestFrom")
  transferRequestsTo TransferRequest[] @relation("TransferRequestTo")
  pendingWithdrawals PendingWithdrawal[]
  company            Company             @relation(fields: [company_id], references: [id])

  @@map("wallets")
}

model Customer {
  id                    String                    @id @default(uuid())
  company_id            String                    @map("company_id")
  email                 String
  is_active             Boolean                   @default(true) @map("is_active")
  created_at            DateTime                  @default(now()) @map("created_at")
  updated_at            DateTime                  @updatedAt @map("updated_at")
  city                  String
  country               String
  date_of_birth         DateTime                  @map("date_of_birth")
  first_name            String                    @map("first_name")
  identification_number String                    @map("identification_number")
  last_name             String                    @map("last_name")
  phone_number          String                    @map("phone_number")
  postal_code           String                    @map("postal_code")
  state                 String
  street                String
  country_iso_code      String                    @map("country_iso_code")
  country_phone_code    String                    @map("country_phone_code")
  id_document_back      String?                   @map("id_document_back")
  id_document_front     String                    @map("id_document_front")
  id_document_type      String
  cards                 Card[]
  providerMappings      CustomerProviderMapping[]
  company               Company                   @relation(fields: [company_id], references: [id])
  notifications         Notification[]
  syncmetadatas         Syncmetadata[]
  transactions          Transaction[]

  @@unique([company_id, email])
  @@map("customers")
}

model Card {
  id                     String        @id @default(uuid())
  company_id             String        @map("company_id")
  customer_id            String        @map("customer_id")
  balance                Decimal       @default(0) @db.Decimal(15, 2)
  status                 CardStatus    @default(ACTIVE)
  created_at             DateTime      @default(now()) @map("created_at")
  updated_at             DateTime      @updatedAt @map("updated_at")
  number                 String        @unique
  bin                    String?       @map("bin")
  brand                  String?       @map("brand")
  city                   String?
  country                String
  country_iso_code       String        @map("country_iso_code")
  currency               String
  cvv                    String
  description            String?
  event                  String?       @map("event_id")
  expiry_month           Int           @map("expiry_month")
  expiry_year            Int           @map("expiry_year")
  is_active              Boolean       @default(true) @map("is_active")
  is_physical            Boolean       @default(false) @map("is_physical")
  is_virtual             Boolean       @default(false) @map("is_virtual")
  last4                  String?       @map("last4")
  masked_number          String?       @map("masked_number")
  name                   String?
  postal_code            String?       @map("postal_code")
  provider               String?
  provider_card_id       String        @map("provider_card_id")
  reference              String?       @map("reference")
  state_code             String?       @map("state_code")
  street                 String?
  provider_card_metadata Json?         @map("provider_card_metadata")
  company                Company       @relation(fields: [company_id], references: [id])
  customer               Customer      @relation(fields: [customer_id], references: [id])
  transactions           Transaction[]

  @@map("cards")
}

model Transaction {
  id                        String                     @id @default(uuid())
  amount                    Decimal                    @db.Decimal(15, 2)
  created_at                DateTime                   @default(now()) @map("created_at")
  card_balance_after        Decimal?                   @map("card_balance_after") @db.Decimal(15, 2)
  card_balance_before       Decimal?                   @map("card_balance_before") @db.Decimal(15, 2)
  reference                 String?
  wallet_balance_after      Decimal?                   @map("wallet_balance_after") @db.Decimal(15, 2)
  wallet_balance_before     Decimal?                   @map("wallet_balance_before") @db.Decimal(15, 2)
  card_id                   String?                    @map("card_id")
  category                  String                     @map("category")
  currency                  String                     @map("currency")
  customer_id               String?                    @map("customer_id")
  description               String?                    @map("description")
  mcc                       String?                    @map("mcc")
  merchant                  Json?                      @map("merchant")
  mid                       String?                    @map("mid")
  order_id                  String?                    @map("order_id")
  provider                  String?                    @map("provider")
  status                    String                     @default("PENDING") @map("status")
  updated_at                DateTime                   @updatedAt @map("updated_at")
  type                      String                     @map("type")
  reason                    String?                    @map("reason")
  company_id                String                     @map("company_id")
  wallet_id                 String?                    @map("wallet_id")
  operator                  String?                    @map("operator")
  phone_number              String?                    @map("phone_number")
  user_id                   String?                    @map("user_id")
  amount_with_fee           Decimal?                   @map("amount_with_fee") @db.Decimal(15, 2)
  fee_amount                Decimal?                   @map("fee_amount") @db.Decimal(15, 2)
  fee_id                    String?                    @map("fee_id")
  net_amount                Decimal?                   @map("net_amount") @db.Decimal(15, 2)
  balanceTransactionRecords BalanceTransactionRecord[]
  notifications             Notification[]
  card                      Card?                      @relation(fields: [card_id], references: [id])
  company                   Company                    @relation(fields: [company_id], references: [id])
  customer                  Customer?                  @relation(fields: [customer_id], references: [id])
  user                      User?                      @relation(fields: [user_id], references: [id])
  wallet                    Wallet?                    @relation(fields: [wallet_id], references: [id])

  @@map("transactions")
}

model Syncmetadata {
  id             String    @id @default(uuid())
  company_id     String    @map("company_id")
  customer_id    String?   @map("customer_id")
  created_at     DateTime  @default(now()) @map("created_at")
  updated_at     DateTime  @updatedAt @map("updated_at")
  last_sync_date DateTime  @default(now()) @map("last_sync_date")
  provider_name  String    @map("provider_name")
  sync_type      String    @map("sync_type")
  company        Company   @relation(fields: [company_id], references: [id])
  customer       Customer? @relation(fields: [customer_id], references: [id])

  @@unique([company_id, provider_name, sync_type])
  @@map("syncmetadata")
}

model Notification {
  id             String       @id @default(uuid())
  customer_id    String?
  transaction_id String?
  title          String
  text           String
  category       String?
  created_by     String?
  created_at     DateTime     @default(now())
  customer       Customer?    @relation(fields: [customer_id], references: [id])
  transaction    Transaction? @relation(fields: [transaction_id], references: [id])

  @@map("notifications")
}

model CustomerLogs {
  id                    String   @id @default(uuid())
  created_at            DateTime @default(now())
  log_json              Json?
  log_txt               String?
  action                String?
  company_id            String?
  customer_id           String?
  transaction_id        String?
  status                String?
  customer_phone_number String?
  reference             String?
}

model UserLogs {
  id                    String   @id @default(uuid())
  created_at            DateTime @default(now())
  log_json              Json?
  log_txt               String?
  action                String?
  company_id            String?
  customer_id           String?
  transaction_id        String?
  status                String?
  customer_phone_number String?
  reference             String?
}

model ExchangeRate {
  id            String   @id @default(uuid())
  company_id    String   @map("company_id")
  from_currency String   @map("from_currency")
  to_currency   String   @map("to_currency")
  rate          Decimal  @db.Decimal(15, 8)
  source        String?
  description   String?
  is_active     Boolean  @default(true) @map("is_active")
  created_at    DateTime @default(now()) @map("created_at")
  updated_at    DateTime @updatedAt @map("updated_at")
  company       Company  @relation(fields: [company_id], references: [id])

  @@unique([company_id, from_currency, to_currency])
  @@map("exchange_rates")
}

model TransactionFee {
  id                   String   @id @default(uuid())
  company_id           String   @map("company_id")
  transaction_type     String   @map("transaction_type")
  transaction_category String   @map("transaction_category")
  country_iso_code     String   @map("country_iso_code")
  currency             String
  fee_percentage       Decimal? @map("fee_percentage") @db.Decimal(5, 4)
  fee_fixed            Decimal? @map("fee_fixed") @db.Decimal(15, 2)
  type                 FeeType
  value                Decimal  @db.Decimal(15, 2)
  active               Boolean  @default(true)
  description          String?
  created_at           DateTime @default(now()) @map("created_at")
  updated_at           DateTime @updatedAt @map("updated_at")
  range_max            Decimal? @db.Decimal(15, 2)
  range_min            Decimal? @db.Decimal(15, 2)
  company              Company  @relation(fields: [company_id], references: [id])

  @@unique([company_id, transaction_type, transaction_category, country_iso_code, currency])
  @@map("transaction_fees")
}

model OnboardingStep {
  id          String     @id @default(uuid())
  company_id  String     @map("company_id")
  name        String
  slug        String
  status      StepStatus @default(PENDING)
  order       Int        @default(0)
  description String?
  created_at  DateTime   @default(now()) @map("created_at")
  updated_at  DateTime   @updatedAt @map("updated_at")
  company     Company    @relation(fields: [company_id], references: [id])

  @@unique([company_id, slug])
  @@map("onboarding_steps")
}

model WalletPhoneNumber {
  id                 String   @id @default(uuid())
  wallet_id          String   @map("wallet_id")
  country_iso_code   String   @map("country_iso_code")
  country_phone_code String   @map("country_phone_code")
  currency           String
  phone_number       String   @map("phone_number")
  operator           String
  created_at         DateTime @default(now()) @map("created_at")
  updated_at         DateTime @updatedAt @map("updated_at")
  wallet             Wallet   @relation(fields: [wallet_id], references: [id], onDelete: Cascade)

  @@unique([wallet_id, phone_number])
  @@map("wallet_phone_numbers")
}

model WalletPhoneOperator {
  id                 String   @id @default(uuid())
  country_iso_code   String   @map("country_iso_code")
  country_phone_code String   @map("country_phone_code")
  currency           String
  operator_code      String   @map("operator_code")
  operator_name      String   @map("operator_name")
  otp_required       Boolean  @default(false) @map("otp_required")
  ussd_code          String?  @map("ussd_code")
  created_at         DateTime @default(now()) @map("created_at")
  updated_at         DateTime @updatedAt @map("updated_at")

  @@unique([country_iso_code, currency, operator_code])
  @@map("wallet_phone_operators")
}

model BalanceTransactionRecord {
  id             String      @id @default(uuid())
  transaction_id String      @map("transaction_id")
  entity_type    String      @map("entity_type")
  entity_id      String      @map("entity_id")
  old_balance    Decimal     @default(0) @db.Decimal(15, 2)
  new_balance    Decimal     @default(0) @db.Decimal(15, 2)
  amount_changed Decimal     @default(0) @db.Decimal(15, 2)
  currency       String
  change_type    String?     @map("change_type")
  description    String?
  created_at     DateTime    @default(now()) @map("created_at")
  transaction    Transaction @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  @@map("balance_transaction_records")
}

model CustomerProviderMapping {
  id                   String   @id @default(uuid())
  customer_id          String   @map("customer_id")
  provider_name        String   @map("provider_name")
  provider_customer_id String   @map("provider_customer_id")
  metadata             Json?    @map("metadata")
  is_active            Boolean  @default(true) @map("is_active")
  created_at           DateTime @default(now()) @map("created_at")
  updated_at           DateTime @updatedAt @map("updated_at")
  customer             Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  @@unique([customer_id, provider_name])
  @@map("customer_provider_mappings")
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum KycStatus {
  NONE
  PENDING
  APPROVED
  REJECTED
}

enum KybStatus {
  NONE
  PENDING
  APPROVED
  REJECTED
}

enum FeeType {
  FIXED
  PERCENTAGE
  RANGE
}

enum IdentificationType {
  NIN
  PASSPORT
  VOTERS_CARD
  DRIVERS_LICENSE
}

enum CardStatus {
  ACTIVE
  FROZEN
  TERMINATED
}

enum TransactionType {
  CREATE
  FUND
  WITHDRAW
  FREEZE
  TERMINATE
  PAYIN_TO_PAYOUT
  PAYOUT_TO_PAYIN
  WALLET_TO_WALLET
  EXTERNAL_WITHDRAW
  CROSS_CURRENCY_TRANSFER
}

enum StepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model TransferRequest {
  id                  String   @id @default(uuid())
  from_wallet_id      String   @map("from_wallet_id")
  to_wallet_id        String   @map("to_wallet_id")
  from_currency       String   @map("from_currency")
  to_currency         String   @map("to_currency")
  amount              Decimal  @db.Decimal(15, 2)
  exchange_rate       Decimal? @db.Decimal(15, 6) @map("exchange_rate")
  converted_amount    Decimal? @db.Decimal(15, 2) @map("converted_amount")
  reason              String?  @map("reason")
  status              String   @default("PENDING_REVIEW") // PENDING_REVIEW, APPROVED, REJECTED, COMPLETED
  requested_by        String   @map("requested_by") // user_id
  approved_by         String?  @map("approved_by") // admin user_id
  approved_at         DateTime? @map("approved_at")
  rejection_reason    String?  @map("rejection_reason")
  created_at          DateTime @default(now()) @map("created_at")
  updated_at          DateTime @updatedAt @map("updated_at")

  from_wallet Wallet @relation("TransferRequestFrom", fields: [from_wallet_id], references: [id])
  to_wallet   Wallet @relation("TransferRequestTo", fields: [to_wallet_id], references: [id])

  @@map("transfer_requests")
}

model PendingWithdrawal {
  id              String   @id @default(uuid())
  wallet_id       String   @map("wallet_id")
  amount          Decimal  @db.Decimal(15, 2)
  fee_amount      Decimal  @db.Decimal(15, 2) @default(0) @map("fee_amount")
  total_amount    Decimal  @db.Decimal(15, 2) @map("total_amount")
  phone_number    String   @map("phone_number")
  operator        String
  reason          String?
  status          String   @default("PENDING_FUNDS") // PENDING_FUNDS, PROCESSING, PROCESSED, FAILED, CANCELLED
  priority        Int      @default(1)
  created_at      DateTime @default(now()) @map("created_at")
  processed_at    DateTime? @map("processed_at")
  failed_attempts Int      @default(0) @map("failed_attempts")
  max_attempts    Int      @default(3) @map("max_attempts")
  error_message   String?  @map("error_message")
  company_id      String   @map("company_id")
  user_id         String   @map("user_id")
  currency        String
  transaction_id  String?  @map("transaction_id") // ID de la transaction créée après traitement

  wallet          Wallet   @relation(fields: [wallet_id], references: [id], onDelete: Cascade)
  company         Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@map("pending_withdrawals")
}
