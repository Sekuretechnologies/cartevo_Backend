// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id           String   @id @default(uuid())
  name         String
  country      String
  email        String   @unique
  clientId     String   @unique @map("client_id")
  clientKey    String   @map("client_key")
  cardPrice    Decimal  @default(5.00) @map("card_price") @db.Decimal(10, 2)
  cardFundRate Decimal  @default(1.02) @map("card_fund_rate") @db.Decimal(5, 4)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  users            User[]
  customers        Customer[]
  cards            Card[]
  wallets          Wallet[]
  userCompanyRoles UserCompanyRole[]

  @@map("companies")
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

model User {
  id             String     @id @default(uuid())
  fullName       String?    @map("full_name")
  email          String     @unique
  password       String?
  companyId      String     @map("company_id")
  step           Int        @default(1)
  status         UserStatus @default(PENDING)
  invitationCode String?    @unique @map("invitation_code")
  otp            String?
  otpExpires     DateTime?  @map("otp_expires")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  company          Company           @relation(fields: [companyId], references: [id])
  userCompanyRoles UserCompanyRole[]

  @@map("users")
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userCompanyRoles UserCompanyRole[]

  @@map("roles")
}

model UserCompanyRole {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  companyId String   @map("company_id")
  roleId    String   @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")

  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])
  role    Role    @relation(fields: [roleId], references: [id])

  @@unique([userId, companyId, roleId])
  @@map("user_company_roles")
}

model Wallet {
  id              String   @id @default(uuid())
  balance         Decimal  @default(0) @db.Decimal(15, 2)
  active          Boolean  @default(true)
  currency        String
  country         String
  countryIsoCode  String   @map("country_iso_code")
  companyId       String   @map("company_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  company Company @relation(fields: [companyId], references: [id])

  @@unique([companyId, currency], name: "companyId_currency")
  @@map("wallets")
}

enum IdentificationType {
  NIN
  PASSPORT
  VOTERS_CARD
  DRIVERS_LICENSE
}

model Customer {
  id                   String             @id @default(uuid())
  companyId            String             @map("company_id")
  firstName            String             @map("first_name")
  lastName             String             @map("last_name")
  country              String
  email                String
  street               String
  city                 String
  state                String
  postalCode           String             @map("postal_code")
  phoneCountryCode     String             @map("phone_country_code")
  phoneNumber          String             @map("phone_number")
  identificationNumber String             @map("identification_number")
  type                 IdentificationType
  image                String?            // URL or path to identification document
  photo                String?            // URL or path to customer photo
  number               String             // Additional identification number
  dob                  DateTime           @map("date_of_birth")
  isActive             Boolean            @default(true) @map("is_active")
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")

  company Company @relation(fields: [companyId], references: [id])
  cards   Card[]

  @@unique([companyId, email])
  @@map("customers")
}

enum CardStatus {
  ACTIVE
  FROZEN
  TERMINATED
}

model Card {
  id         String     @id @default(uuid())
  companyId  String     @map("company_id")
  customerId String     @map("customer_id")
  status     CardStatus @default(ACTIVE)
  balance    Decimal    @default(0) @db.Decimal(15, 2)
  number     String     @unique // Card number
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  company      Company       @relation(fields: [companyId], references: [id])
  customer     Customer      @relation(fields: [customerId], references: [id])
  transactions Transaction[]

  @@map("cards")
}

enum TransactionType {
  CREATE
  FUND
  WITHDRAW
  FREEZE
  TERMINATE
}

model Transaction {
  id                  String          @id @default(uuid())
  type                TransactionType
  idCard              String          @map("id_card")
  cardBalanceBefore   Decimal         @map("card_balance_before") @db.Decimal(15, 2)
  cardBalanceAfter    Decimal         @map("card_balance_after") @db.Decimal(15, 2)
  walletBalanceBefore Decimal         @map("wallet_balance_before") @db.Decimal(15, 2)
  walletBalanceAfter  Decimal         @map("wallet_balance_after") @db.Decimal(15, 2)
  amount              Decimal         @db.Decimal(15, 2)
  reference           String?
  createdAt           DateTime        @default(now()) @map("created_at")

  card Card @relation(fields: [idCard], references: [id])

  @@map("transactions")
}
